(dp1
S'output'
p2
S''
sS'layer'
p3
S'/home/arosenfeld/Dropbox/fog_backup/web2py/applications/kpax/controllers/members.py'
p4
sS'code'
p5
S'# coding: utf8\nimport ldap\n\nfog_dn = \'dc=fog,dc=icmc,dc=usp,dc=br\'\n\ndef _ldap_connection():\n    return ldap.initialize(\'ldap://fog.icmc.usp.br\')\n\ndef _in_directory(username):\n    con = _ldap_connection()\n    users_list = con.search_s(\'ou=people,\' + fog_dn, ldap.SCOPE_SUBTREE, \'(uid=%s)\' % username)\n    con.unbind()\n    return T(str(len(users_list) > 0))\n    \ndef sync_db():\n    con = _ldap_connection()\n    con.simple_bind_s(\'cn=admin,\' + fog_dn, \'f0gs3rv3r\')\n    ldap_users = con.search_s(\'ou=people,\' + fog_dn, ldap.SCOPE_SUBTREE, \'(objectClass=posixAccount)\', \n        attrlist=[\'uid\', \'uidNumber\', \'cn\', \'sn\', \'userPassword\'])  \n    ldap_names = dict([(i[1][\'uid\'][0],i[1]) for i in ldap_users])\n    names_to_add = []\n    names_in_db = {}\n    for user in db(db.user.id>0).select():\n        if user.username not in ldap_names:\n            names_to_add.append(user.username)\n        else:\n            attrs = []\n            missing = []\n            equal = []\n            for ldap_attr, db_attr in [(\'cn\', \'firstname\'), \n                                       (\'sn\', \'lastname\'),\n                                       (\'userPassword\', \'password\')]:\n                if ldap_attr not in ldap_names[user.username]:\n                    missing.append(ldap_attr)\n                elif ldap_names[user.username][ldap_attr][0] != getattr(user, db_attr):\n                    attrs.append((db_attr, str(ldap_names[user.username][ldap_attr]), getattr(user, db_attr), ldap_names[user.username][ldap_attr][0] == getattr(user, db_attr)))\n                else:\n                    equal.append(ldap_attr)\n            \n            names_in_db[user.username] = {\'different\': attrs,\n                                          \'missing\': missing,\n                                          \'equal\': equal}\n        """\n        uid_list = \n        uid = max([int(i[1].get(\'uidNumber\', [1000])[0]) for i in uid_list]) + 1\n        con.add_s(\'uid=%s,ou=people,\' % form.vars.username + fog_dn, \n            [(\'uid\', form.vars.username),\n             (\'objectClass\', [\'posixAccount\', \'inetOrgPerson\']),\n             (\'cn\', form.vars.firstname),\n             (\'sn\', form.vars.lastname), \n             (\'uidNumber\', str(uid)),\n             (\'gidNumber\', \'1000\'), \n             (\'homeDirectory\', \'\')])        \n        """\n    return dict(names_to_add=names_to_add, names_in_db=names_in_db)\n\ndef add():\n    form=FORM(TABLE(\n          TR(T("First name:"), INPUT(_name="firstname",requires=IS_NOT_EMPTY())),\n          TR(T("Last name:"), INPUT(_name="lastname",requires=IS_NOT_EMPTY())),\n          TR(T("Username:"), INPUT(_name="username", requires=IS_NOT_EMPTY())),\n          TR(T("Email:"), INPUT(_name="email",requires=[IS_NOT_EMPTY(), IS_NOT_IN_DB(db,\'user.email\')])),\n          TR("Password:", INPUT(_name="password",_type=\'password\',requires=[IS_NOT_EMPTY(),CRYPT()])),\\\n                    TR("Password (again):",\\\n          INPUT(_name="password2",_type=\'password\',requires=[IS_NOT_EMPTY(),CRYPT()])),\\\n                    TR("",INPUT(_type="submit",_value="register"))))\n    if form.accepts(request.vars,session) and \\\n       form.vars.password==form.vars.password2:\n        if EMAIL_VERIFICATION:\n            key=md5.new(str(random.randint(0,9999))).hexdigest()\n        else:\n            key=\'\'\n        id=db.user.insert(firstname=form.vars.firstname,\n                          lastname=form.vars.lastname,\n                          username=form.vars.username,\n                          email=form.vars.email,\n                          password=form.vars.password,\n                          verification=key)\n                          \n        response.flash=\'Registration completed, you may login now\'\n        redirect(URL(r=request,f=\'list\'))\n    else:\n        return dict(form=form)\n\ndef index(): \n    table = TABLE(*([TR(TD("Username"), TD("First name"), TD("In LDAP"))] + \n                    [TR(TD(member.username), TD(member.firstname), \n                        TD(A("Check", \n                             _href="#", \n                             _onclick="ajax(\'" + URL(r=request,f=\'in_directory/\'+member.username) + "\',[\'%s_ldap\'],\'%s_ldap\');" % (member.username, member.username)), \n                             _id=member.username + \'_ldap\')) \\\n                        for member in db(db.user.id>0).select()]))\n    return dict(table=table)\n    \ndef in_directory():\n    username = request.args[0]\n    return _in_directory(username)\n\ndef list():\n    con = ldap.initialize(\'ldap://fog.icmc.usp.br\')\n    users_list = con.search_s(\'ou=people,\' + fog_dn, ldap.SCOPE_SUBTREE, \'(objectClass=posixAccount)\')\n    return dict(list=users_list)    \n\ndef register():\n    form=FORM(TABLE(\n          TR(T("First name:"), INPUT(_name="firstname",requires=IS_NOT_EMPTY())),\n          TR(T("Last name:"), INPUT(_name="lastname",requires=IS_NOT_EMPTY())),\n          TR(T("Username:"), INPUT(_name="username", requires=IS_NOT_EMPTY())),\n          TR(T("Email:"), INPUT(_name="email",requires=[IS_NOT_EMPTY(), IS_NOT_IN_DB(db,\'user.email\')])),\n          TR("Password:", INPUT(_name="password",_type=\'password\',requires=[IS_NOT_EMPTY(),CRYPT()])),\\\n                    TR("Password (again):",\\\n          INPUT(_name="password2",_type=\'password\',requires=[IS_NOT_EMPTY(),CRYPT()])),\\\n                    TR("",INPUT(_type="submit",_value="register"))))\n    if form.accepts(request.vars,session) and \\\n       form.vars.password==form.vars.password2:\n        con = ldap.initialize(\'ldap://fog.icmc.usp.br\')\n        con.simple_bind_s(\'cn=admin,\' + fog_dn, \'f0gs3rv3r\')\n        uid_list = con.search_s(\'ou=people,\' + fog_dn, ldap.SCOPE_SUBTREE, \'(objectClass=posixAccount)\', attrlist=[\'uidNumber\'])\n        uid = max([int(i[1].get(\'uidNumber\', [1000])[0]) for i in uid_list]) + 1\n        con.add_s(\'uid=%s,ou=people,\' % form.vars.username + fog_dn, \n            [(\'uid\', form.vars.username),\n             (\'objectClass\', [\'posixAccount\', \'inetOrgPerson\']),\n             (\'cn\', form.vars.firstname),\n             (\'sn\', form.vars.lastname), \n             (\'uidNumber\', str(uid)),\n             (\'gidNumber\', \'1000\'), \n             (\'homeDirectory\', \'\')])\n        con.unbind()\n        response.flash = "User registered"\n    return dict(form=form)\n\nresponse._vars=response._caller(sync_db)\n'
p6
sS'traceback'
p7
S'Traceback (most recent call last):\n  File "/home/arosenfeld/Dropbox/fog_backup/web2py/gluon/restricted.py", line 184, in restricted\n    exec ccode in environment\n  File "/home/arosenfeld/Dropbox/fog_backup/web2py/applications/kpax/controllers/members.py", line 132, in <module>\n  File "/home/arosenfeld/Dropbox/fog_backup/web2py/gluon/globals.py", line 103, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/arosenfeld/Dropbox/fog_backup/web2py/applications/kpax/controllers/members.py", line 17, in sync_db\n    con.simple_bind_s(\'cn=admin,\' + fog_dn, \'f0gs3rv3r\')\n  File "/usr/lib/python2.6/site-packages/ldap/ldapobject.py", line 198, in simple_bind_s\n    msgid = self.simple_bind(who,cred,serverctrls,clientctrls)\n  File "/usr/lib/python2.6/site-packages/ldap/ldapobject.py", line 192, in simple_bind\n    return self._ldap_call(self._l.simple_bind,who,cred,EncodeControlTuples(serverctrls),EncodeControlTuples(clientctrls))\n  File "/usr/lib/python2.6/site-packages/ldap/ldapobject.py", line 96, in _ldap_call\n    result = func(*args,**kwargs)\nSERVER_DOWN: {\'desc\': "Can\'t contact LDAP server"}\n'
p8
s.