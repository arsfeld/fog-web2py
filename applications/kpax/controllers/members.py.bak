# coding: utf8
import ldap

fog_dn = 'dc=fog,dc=icmc,dc=usp,dc=br'

def _ldap_connection():
    return ldap.initialize('ldap://fog.icmc.usp.br')

def _in_directory(username):
    con = _ldap_connection()
    users_list = con.search_s('ou=people,' + fog_dn, ldap.SCOPE_SUBTREE, '(uid=%s)' % username)
    con.unbind()
    return T(str(len(users_list) > 0))
    
def sync_db():
    con = _ldap_connection()
    con.simple_bind_s('cn=admin,' + fog_dn, 'f0gs3rv3r')
    ldap_users = con.search_s('ou=people,' + fog_dn, ldap.SCOPE_SUBTREE, '(objectClass=posixAccount)', 
        attrlist=['uid', 'uidNumber', 'cn', 'sn', 'userPassword'])
    ldap_names = {}
    for ldap_dn, ldap_attrs in ldap_users:
        ldap_attrs['dn'] = [ldap_dn]
        ldap_names[ldap_attrs['uid'][0]] = ldap_attrs
    names_added = []
    names_in_db = {}
    users = []
    for user in db(db.user.id>0).select():
        users.append(user.username)
        if user.username not in ldap_names:
            names_added.append(user.username)
            uid_list = con.search_s('ou=people,' + fog_dn, ldap.SCOPE_SUBTREE, '(objectClass=posixAccount)', attrlist=['uidNumber'])
            uid = max([int(user_attrs.get('uidNumber', [1000])[0]) for user_dn, user_attrs in uid_list]) + 1
            con.add_s('uid=%s,ou=people,%s' %  (user.username, fog_dn),
                [('uid', user.username),
                 ('objectClass', ['posixAccount', 'inetOrgPerson']),
                 ('cn', user.firstname),
                 ('sn', user.lastname), 
                 ('uidNumber', str(uid)),
                 ('gidNumber', '1000'), 
                 ('homeDirectory', '')])  
        else:
            attrs = []
            adding = []
            mod_list = []
            for ldap_attr, db_attr in [('cn', 'firstname'), 
                                       ('sn', 'lastname'),
                                       ('userPassword', 'password')]:
                op_type = False
                if ldap_attr not in ldap_names[user.username]:
                    adding.append(ldap_attr)
                    op_type = ldap.MOD_ADD
                elif ldap_names[user.username][ldap_attr][0] != getattr(user, db_attr):
                    attrs.append((db_attr, str(ldap_names[user.username][ldap_attr]), getattr(user, db_attr)))
                    op_type = ldap.MOD_REPLACE
                if op_type is not False:
                    mod_list.append((op_type, ldap_attr, str(getattr(user, db_attr))))
            if mod_list:
                con.modify_s(ldap_names[user.username]['dn'][0], mod_list)
            names_in_db[user.username] = {'adding': adding, 'modifying': attrs}
    extra_users = [uid for uid in ldap_names if uid not in users]
    for user in extra_users:
        con.delete_s(ldap_names[user]['dn'][0])
    con.unbind()
    return dict(names_added=names_added, names_in_db=names_in_db, extra_users=extra_users)

def add():
    form=FORM(TABLE(
          TR(T("First name:"), INPUT(_name="firstname",requires=IS_NOT_EMPTY())),
          TR(T("Last name:"), INPUT(_name="lastname",requires=IS_NOT_EMPTY())),
          TR(T("Username:"), INPUT(_name="username", requires=IS_NOT_EMPTY())),
          TR(T("Email:"), INPUT(_name="email",requires=[IS_NOT_EMPTY(), IS_NOT_IN_DB(db,'user.email')])),
          TR("Password:", INPUT(_name="password",_type='password',requires=[IS_NOT_EMPTY(),CRYPT()])),\
                    TR("Password (again):",\
          INPUT(_name="password2",_type='password',requires=[IS_NOT_EMPTY(),CRYPT()])),\
                    TR("",INPUT(_type="submit",_value="register"))))
    if form.accepts(request.vars,session) and \
       form.vars.password==form.vars.password2:
        if EMAIL_VERIFICATION:
            key=md5.new(str(random.randint(0,9999))).hexdigest()
        else:
            key=''
        id=db.user.insert(firstname=form.vars.firstname,
                          lastname=form.vars.lastname,
                          username=form.vars.username,
                          email=form.vars.email,
                          password=form.vars.password,
                          verification=key)
                          
        response.flash='Registration completed, you may login now'
        redirect(URL(r=request,f='list'))
    else:
        return dict(form=form)

def index(): 
    table = TABLE(*([TR(TD("Username"), TD("First name"), TD("In LDAP"))] + 
                    [TR(TD(member.username), TD(member.firstname), 
                        TD(A("Check", 
                             _href="#", 
                             _onclick="ajax('" + URL(r=request,f='in_directory/'+member.username) + "',['%s_ldap'],'%s_ldap');" % (member.username, member.username)), 
                             _id=member.username + '_ldap')) \
                        for member in db(db.user.id>0).select()]))
    return dict(table=table)
    
def in_directory():
    username = request.args[0]
    return _in_directory(username)

def list():
    con = ldap.initialize('ldap://fog.icmc.usp.br')
    users_list = con.search_s('ou=people,' + fog_dn, ldap.SCOPE_SUBTREE, '(objectClass=posixAccount)')
    return dict(list=users_list)    

def register():
    form=FORM(TABLE(
          TR(T("First name:"), INPUT(_name="firstname",requires=IS_NOT_EMPTY())),
          TR(T("Last name:"), INPUT(_name="lastname",requires=IS_NOT_EMPTY())),
          TR(T("Username:"), INPUT(_name="username", requires=IS_NOT_EMPTY())),
          TR(T("Email:"), INPUT(_name="email",requires=[IS_NOT_EMPTY(), IS_NOT_IN_DB(db,'user.email')])),
          TR("Password:", INPUT(_name="password",_type='password',requires=[IS_NOT_EMPTY(),CRYPT()])),\
                    TR("Password (again):",\
          INPUT(_name="password2",_type='password',requires=[IS_NOT_EMPTY(),CRYPT()])),\
                    TR("",INPUT(_type="submit",_value="register"))))
    if form.accepts(request.vars,session) and \
       form.vars.password==form.vars.password2:
        con = ldap.initialize('ldap://fog.icmc.usp.br')
        con.simple_bind_s('cn=admin,' + fog_dn, 'f0gs3rv3r')
        uid_list = con.search_s('ou=people,' + fog_dn, ldap.SCOPE_SUBTREE, '(objectClass=posixAccount)', attrlist=['uidNumber'])
        uid = max([int(i[1].get('uidNumber', [1000])[0]) for i in uid_list]) + 1
        con.add_s('uid=%s,ou=people,' % form.vars.username + fog_dn, 
            [('uid', form.vars.username),
             ('objectClass', ['posixAccount', 'inetOrgPerson']),
             ('cn', form.vars.firstname),
             ('sn', form.vars.lastname), 
             ('uidNumber', str(uid)),
             ('gidNumber', '1000'), 
             ('homeDirectory', '')])
        con.unbind()
        response.flash = "User registered"
    return dict(form=form)
