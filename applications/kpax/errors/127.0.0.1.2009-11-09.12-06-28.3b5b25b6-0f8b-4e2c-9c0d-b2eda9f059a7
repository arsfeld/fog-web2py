(dp1
S'output'
p2
S''
sS'layer'
p3
S'/home/arosenfeld/Dropbox/fog_backup/web2py/applications/kpax/controllers/cas.py'
p4
sS'code'
p5
S'import md5, random, time\n\nresponse.title=\'Central Authentication Service (CAS)\'\nresponse.view=\'cas/generic.html\'\nDT=300\n\nmenu_out=[\n    [\'login\',request.function==\'login\',URL(r=request,f=\'login\')],\n    [\'register\',request.function==\'register\',URL(r=request,f=\'register\')],\n    [\'retrieve password\',request.function==\'retrieve\',URL(r=request,f=\'retrieve\')]]\nmenu_in=[\n    [\'edit profile\',request.function==\'edit_profile\',URL(r=request,f=\'edit_profile\')],\n    [\'change password\',request.function==\'change_password\',URL(r=request,f=\'change_password\')]]\n\nresponse.menu=menu_in if session.ticket else menu_out\n\nif request.vars.service: session.service=request.vars.service\nif not session.service: session.service=URL(r=request,f=\'login\')\nif not session.ctime: session.ctime=0\nif session.ctime<now-DT and request.function in [\'change_password\',\'edit_profile\']:\n    redirect(URL(r=request,f=\'logout\'))\nelse:\n    session.ctime=now    \n\ndef index():\n    if session.ticket:\n        return dict(form=B("Welcome %(name)s" % {\'name\':session.user_name}))\n    else:\n        return dict(form=B("You are NOT logged in"))\n\ndef insert_ticket(session):\n    db(db.ticket.url==session.service)\\\n      (db.ticket.user==session.user_id).delete()\n    db.ticket.insert(code=session.ticket,user=session.user_id,\n                     url=session.service,ctime=now)\n\ndef login(): \n    response.menu=menu_out\n    if request.vars.service and session.ticket and session.ctime>now-DT:\n        insert_ticket(session)\n        redirect(session.service+"?ticket="+session.ticket)\n    form=FORM(TABLE(TR("Username:",INPUT(_name="username",requires=IS_NOT_EMPTY())),\n                    TR("Password:",INPUT(_name="password",_type=\'password\',\n                                         requires=[IS_NOT_EMPTY(),CRYPT()])),\n                    TR("",INPUT(_type="submit",_value="login"))))\n    if form.accepts(request.vars,session):\n        r=db(db.user.username==form.vars.username)\\\n            (db.user.password==form.vars.password)\\\n            (db.user.verification==\'\')\\\n             .select()\n        if len(r)>0:\n            if r[0].verification:\n                response.flash = "Please check your email for the authentication url"\n            else:\n                session.user_id=r[0].id\n                session.user_name=r[0].username\n                session.user_email=r[0].email\n                session.ticket=str(time.time()*random.random())\n                session.ctime=now\n                session.flash=\'User logged in\'\n                print session\n                insert_ticket(session)\n                redirect(session.service+"?ticket="+session.ticket)\n        else:\n            time.sleep(2)\n            response.flash=\'Invalid login\'\n    if form.errors:\n        response.flash=\'Invalid login\'\n    return dict(form=form)\n\ndef check():\n    response.headers[\'Content-Type\']=\'text\'\n    rows=db(db.ticket.url==request.vars.service)\\\n           (db.ticket.code==request.vars.ticket)\\\n           (db.ticket.ctime>now-60)\\\n           (db.ticket.user==db.user.id).select()    \n    if len(rows):\n        user=rows[0].user\n        return \'yes\\n%s:%s:%s\'%(user.id,user.email,user.name)\n    return \'no\\n\'\n\ndef logout():\n    response.menu=menu_out\n    session.ticket=None\n    response.flash="Logged out"\n    return dict(form=B("Bye, %(name)s" % {\'name\':session.user_name}))\n\ndef register():\n    form=FORM(TABLE(\n          TR(T("First name:"), INPUT(_name="firstname",requires=IS_NOT_EMPTY())),\n          TR(T("Last name:"), INPUT(_name="lastname",requires=IS_NOT_EMPTY())),\n          TR(T("Username:"), INPUT(_name="username", requires=IS_NOT_EMPTY())),\n          TR(T("Email:"), INPUT(_name="email",requires=[IS_NOT_EMPTY(), IS_NOT_IN_DB(db,\'user.email\')])),\n          TR("Password:", INPUT(_name="password",_type=\'password\',requires=[IS_NOT_EMPTY(),CRYPT()])),\\\n                    TR("Password (again):",\\\n          INPUT(_name="password2",_type=\'password\',requires=[IS_NOT_EMPTY(),CRYPT()])),\\\n                    TR("",INPUT(_type="submit",_value="register"))))\n    if form.accepts(request.vars,session) and \\\n       form.vars.password==form.vars.password2:\n        if EMAIL_VERIFICATION:\n            key=md5.new(str(random.randint(0,9999))).hexdigest()\n        else:\n            key=\'\'\n        id=db.user.insert(firstname=form.vars.firstname,\n                          lastname=form.vars.lastname,\n                          username=form.vars.username,\n                          email=form.vars.email,\n                          password=form.vars.password,\n                          verification=key)\n        if EMAIL_VERIFICATION:\n            message="to complete registration visit: %s?id=%s&key=%s"%(CAS.verify_url,id,key) \n            try:\n                email(EMAIL_SENDER,form.vars.email,\'registration\',message)\n                session.flash="An email was sent to you"\n                redirect(URL(r=request,f=\'login\'))\n            except Exception:\n                print message\n                response.flash="Internal error, we are unable to send the email"\n        else:\n            response.flash=\'Registration completed, you may login now\'\n            redirect(URL(r=request,f=\'login\'))\n    elif form.vars.password!=form.vars.password2:\n        form.errors.password2=\'passwords do not match\'\n        response.flash="Form error"\n    return dict(form=form)\n\ndef verify():\n    id=request.vars.id\n    key=request.vars.key\n    r=db(db.user.id==id)\\\n        (db.user.verification==key)\\\n        .select()\n    if len(r)==0: raise HTTP(400,\'page does not exist\')\n    r[0].update_record(verification=\'\')\n    session.ticket=str(time.time()*random.random())\n    session.user_id=r[0].id\n    session.user_name=r[0].name\n    session.user_email=r[0].email\n    session.ctime=now\n    insert_ticket(session)\n    if r[0].password==\'\':\n        session.flash=\'You must change your password\'\n        redirect(URL(r=request,f="change_password"))\n    else: session.flash=\'registration complete\'\n    redirect(session.service)\n\ndef retrieve():\n    form=FORM(TABLE(TR("Email:",INPUT(_name="email",requires=[IS_NOT_EMPTY(),IS_IN_DB(db,\'user.email\')])),\n                    TR("",INPUT(_type="submit",_value="retrieve"))))    \n    if form.accepts(request.vars,session):\n        r=db(db.user.email==form.vars.email).select()\n        if len(r):\n            key=md5.new(str(random.randint(0,9999))).hexdigest()\n            id=r[0].id\n            r[0].update_record(password=\'\',verification=key)\n            message="To change your password visit: %s?id=%s&key=%s"%(CAS.verify_url,id,key) \n            try:\n                email(EMAIL_SENDER,form.vars.email,\'registration\',message)\n                session.flash="An email was sent to you"            \n                redirect(URL(r=request,f=\'login\'))                \n            except Exception:\n                print message\n                response.flash="Internal error, we are unable to send the email"\n        else:\n            form.errors.email=\'email not in database\'\n            response.flash="Form error"\n    return dict(form=form)\n\ndef change_password():\n    if not session.ticket: redirect(URL(r=request,f=\'login\'))\n    form=FORM(TABLE(TR("Password:",INPUT(_name="password",_type=\'password\',requires=[IS_NOT_EMPTY(),CRYPT()])),\n                    TR("Password (again):",INPUT(_name="password2",_type=\'password\',requires=[IS_NOT_EMPTY(),CRYPT()])),\n                    TR("",INPUT(_type="submit",_value="register"))))    \n    if form.accepts(request.vars,session) and \\\n       form.vars.password==form.vars.password2:\n        db(db.user.id==session.user_id).update(password=form.vars.password)\n        session.flash=\'password updated\'\n        redirect(session.service)\n    elif form.vars.password!=form.vars.password2:\n        form.errors.passwords2=\'passwords do not match\'\n        response.flash="Form error"\n    return dict(form=form)\n\n\ndef edit_profile():\n    if not session.ticket: redirect(URL(r=request,f=\'login\'))\n    user=db(db.user.id==session.user_id).select()[0]\n    form=SQLFORM(db.user,user,fields=[\'name\',\'email\'],showid=False)\n    if form.accepts(request.vars,session):\n        session.flash=\'profile updated\'\n        redirect(session.service)\n    return dict(form=form)\n\nresponse._vars=response._caller(check)\n'
p6
sS'traceback'
p7
S'Traceback (most recent call last):\n  File "/home/arosenfeld/Dropbox/fog_backup/web2py/gluon/restricted.py", line 184, in restricted\n    exec ccode in environment\n  File "/home/arosenfeld/Dropbox/fog_backup/web2py/applications/kpax/controllers/cas.py", line 194, in <module>\n  File "/home/arosenfeld/Dropbox/fog_backup/web2py/gluon/globals.py", line 103, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/arosenfeld/Dropbox/fog_backup/web2py/applications/kpax/controllers/cas.py", line 79, in check\n    return \'yes\\n%s:%s:%s\'%(user.id,user.email,user.name)\n  File "/home/arosenfeld/Dropbox/fog_backup/web2py/gluon/sql.py", line 617, in __getattr__\n    return dict.__getitem__(self,key)\nKeyError: \'name\'\n'
p8
s.